schema {
  query: Query
  mutation: Mutation
}

enum Category {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

type User {
  id: Int!
  username: String!
  email: String!
  avatarPicture: Media
  created: String!
  activated: Boolean!
}

type MimeType {
  id: Int!
  type: String!
  category: Category!
  extensions: [String]
  preferred_extension: String!
}

input MimeTypeFilter {
  type: String
  category: Category
  extension: String
  preferred_extension: String
}

type Session {
  userId: Int!
  sessionId: Int!
  username: String!
  avatarPicture: String
  sessionToken: String!
  sessionExpireDateTime: String!
  admin: Boolean!
  created: String!
}

type Media {
  id: Int!
  title: String!
  url: String!
  mimetype: String!
  thumbnail: Media
  userId: Int!
  adminOnly: Boolean!
  uploaded: Boolean!
  created: String!
  fileSize: Int!
}

type Album {
  id: Int!
  title: String!
  media: [Media]
  userId: Int!
  created: String!
}

input MediaFilter {
  title: String
  mimetype: String
  userId: Int
}

input Pagination {
  page: Int!
  limit: Int!
}

input Sorting {
  field: String!
  order: String!
}

input CreateMediaInput {
  title: String!
  url: String!
  mimetype: String!
  thumbnail: String
  adminOnly: Boolean
}

input EditMediaInput {
  id: Int!
  title: String
  url: String
  mimetype: String
  thumbnail: String
  adminOnly: Boolean
}

type Query {
  login(username: String!, password: String!): Session
  logout: Boolean!
  refreshSession: Session
  listMedia(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listVideos(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listMusic(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listAlbums(albumTitleFilter: String, pagination: Pagination, sorting: Sorting): [Album]
  listPictures(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listDocuments(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listOtherFiles(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
  listMimeTypes(filter: MimeTypeFilter, pagination: Pagination, sorting: Sorting): [MimeType]
  getMediaById(id: Int!): Media
}

type Mutation {
  createMedia(input: CreateMediaInput!): Media
  editMedia(input: EditMediaInput!): Media
  deleteMedia(id: Int!): Boolean
  register(username: String!, email: String!, password: String!): Boolean

}
