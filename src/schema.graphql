schema {
    query: Query
    mutation: Mutation
}

enum Category {
    IMAGE
    VIDEO
    AUDIO
    DOCUMENT
    OTHER
}

type User {
    id: ID!
    username: String!
    email: String!
    avatar: Media
    created: String!
    updated: String
    activated: Boolean!
    banned: Boolean!
    likedMedia: [LikeDislike!]!
    dislikedMedia: [LikeDislike!]!
}

input EditUserInput {
    id: ID!
    username: String
    email: String
    password: String
}

input RegisterUserInput {
    username: String!
    email: String!
    password: String!
}

type MimeType {
    id: ID!
    type: String!
    category: Category!
    extensions: [String]
    preferred_extension: String!
}

input MimeTypeFilter {
    type: String
    category: Category
    extension: String
    preferred_extension: String
}

type Session {
    userId: ID!
    sessionId: ID!
    user: User!
    avatarPicture: String
    sessionToken: String!
    sessionExpireDateTime: String!
    admin: Boolean!
    created: String!
    updated: String
}

# Enum to represent like or dislike action
enum LikeDislikeAction {
    LIKE
    DISLIKE
}

type Media {
    id: ID!
    title: String!
    description: String
    url: String!
    mimetype: String!
    thumbnail: Media
    userId: ID!
    adminOnly: Boolean!
    uploaded: Boolean!
    created: String!
    updated: String
    fileSize: Int!
    view_count: Int!
    likes: Int!
    dislikes: Int!
}

type MediaComment {
    id: ID!
    mediaId: ID!
    userId: ID!
    comment: String!
    created: String!
    updated: String!
}

# Define the LikeDislike type
type LikeDislike {
    id: ID!
    userId: ID!
    mediaId: ID!
    action: LikeDislikeAction!
    createdAt: String!
    updatedAt: String!
}

# Input types for creating and updating LikeDislike
input CreateLikeDislikeInput {
    mediaId: ID!
    action: LikeDislikeAction!
}

input UpdateLikeDislikeInput {
    id: ID!
    action: LikeDislikeAction!
}

type Album {
    id: ID!
    title: String!
    media: [Media]
    userId: ID!
    created: String!
    updated: String
}

input MediaFilter {
    title: String
    mimetype: String
    userId: Int
}

input Pagination {
    page: Int!
    limit: Int!
}

input Sorting {
    field: String!
    order: String!
}

input CreateMediaInput {
    title: String!
    url: String!
    mimetype: String!
    thumbnail: String
    adminOnly: Boolean
}

input EditMediaInput {
    id: ID!
    title: String
    description: String
    url: String
    mimetype: String
    thumbnail: String
    adminOnly: Boolean
}

type Query {
    listMedia(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listVideos(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listMusic(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listAlbums(albumTitleFilter: String, pagination: Pagination, sorting: Sorting): [Album]
    listPictures(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listDocuments(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listOtherFiles(filter: MediaFilter, pagination: Pagination, sorting: Sorting): [Media]
    listMimeTypes(filter: MimeTypeFilter, pagination: Pagination, sorting: Sorting): [MimeType]
    getMediaById(id: ID!): Media
    listRelatedMedia(id: ID!): [Media]
    listMediaComments(mediaId: ID!): [MediaComment]  # Add the new listMediaComments query
    getLikesByUser(userId: ID!): [LikeDislike!]!
    getDislikesByUser(userId: ID!): [LikeDislike!]!
}

type Mutation {
    refreshSession: Session
    createMedia(input: CreateMediaInput!): Media!
    editMedia(input: EditMediaInput!): Media!
    deleteMedia(id: ID!): Boolean!
    loginUser(username: String!, password: String!): Session
    logoutUser: Boolean!
    registerUser(input: RegisterUserInput!): User!
    activateUser(activationCode: String!): Boolean!
    editUser(input: EditUserInput!): User!
    setAvatar(mediaId: ID!): User!
    createLikeDislike(input: CreateLikeDislikeInput!): LikeDislike!
    updateLikeDislike(input: UpdateLikeDislikeInput!): LikeDislike!
    deleteLikeDislike(id: ID!): Boolean!
}
